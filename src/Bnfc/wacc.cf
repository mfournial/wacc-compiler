-- | WACC TREE
WaccTree . Exp ::= Program ;


-- | Program Root
Program . Program ::= "begin" [Function] [Statement] "end" ;


-- | Function
Function . Function ::= Type Identifier "(" [Parameter] ")" "is" [Statement] "end" ;
terminator Function "" ; 


-- | Parameter
Param . Parameter ::= Type Identifier ;
separator Parameter "," ;


-- | Statements
StatSkip     . Statement ::= "skip" ;
StatDecAss   . Statement ::= Type Identifier "=" AssignRhs ;
StatAss      . Statement ::= AssignLhs "=" AssignRhs ;
StatRead     . Statement ::= "read" Expression ;
StatFree     . Statement ::= "free" Expression ;
StatReturn   . Statement ::= "return" Expression;
StatExit     . Statement ::= "exit" Expression ;
StatPrint    . Statement ::= "print" Expression ;
StatPrintLn  . Statement ::= "println" Expression ;
StatIf       . Statement ::= "if" Expression "then" [Statement] "else" [Statement] "fi" ;
StatWhile    . Statement ::= "while" Expression "do" [Statement] "done" ;
StatScope    . Statement ::= "begin" [Statement] "end" ;

(:[]). [Statement] ::= Statement ;
(:)  . [Statement] ::= Statement ";" [Statement] ;


-- | Assign left hand side
AssignToIdent    . AssignLhs ::= Identifier ;
AssignToArrayElem. AssignLhs ::= ArrayElem ;
AssignToPair     . AssignLhs ::= PairElem ;


-- | Assign Right hand side
AssignExp          . AssignRhs ::= Expression ;
AssignArrayLit     . AssignRhs ::= ArrayDeclarationLiteral ;
AssignPair         . AssignRhs ::= "newpair" "(" Expression "," Expression ")" ;
AssignPairElem     . AssignRhs ::= PairElem ;
AssignFunctionCall . AssignRhs ::= "call" Identifier "(" ArgumentList ")" ;


-- | Argument list for calling function
ArgumentList . ArgumentList ::= [Expression];
terminator Expression "," ;


-- | Pair Element return
PairFst . PairElem ::= "fst" Expression ;
PairSnd . PairElem ::= "snd" Expression ;


-- | Global types
BaseType  . Type ::= BaseType ;
ArrayType . Type ::= ArrayDeclarationLiteral ;
PairType  . Type ::= "pair" "(" PairElemType "," PairElemType ")" ;


-- | Base type
IntType    . BaseType ::= "int" ;
BoolType   . BaseType ::= "bool" ;
CharType   . BaseType ::= "char" ;
StringType . BaseType ::= "string" ;

-- | Array Type Declaration literal
ArrayDeclarationLiteral . ArrayDeclarationLiteral ::= Type "[" "]" ;

ArrayElem        . ArrayElem        ::= Identifier "[" ArrayElemLiteral "]" ;
ArrayElemLiteral . ArrayElemLiteral ::= [Expression] ;
(:[])            . [Expression] ::= Expression ;
(:)							 . [Expression] ::= Expression "," [Expression] ;


-- | Pair Element type
PairElemTypeBase  . PairElemType ::= BaseType ;
PairElemTypeArray . PairElemType ::= ArrayDeclarationLiteral ;
PairElemTypePair  . PairElemType ::= "pair" ;


-- | Expression
IntExp     . Expression ::= IntLiteral ;
BoolExp    . Expression ::= BoolLiteral ;
CharExpr   . Expression ::= CharLiteral ;
StringExpr . Expression ::= StringLiteral ;
PairExpr   . Expression ::= PairLiteral ;
IdentExpr  . Expression ::= Identifier ;
ArrayExpr  . Expression ::= Identifier ArrayAccess;
UExpr      . Expression ::= UnaryOperator Expression ;
BExp       . Expression ::= Expression BinaryOperator Expression ;
BracketExp . Expression ::= "(" Expression ")" ;


-- | Int literal declaration data
IntPlus    . IntLiteral ::= PlusLiteral IntDigit ;
IntMinus   . IntLiteral ::= MinusLiteral IntDigit ;
IntLiteral . IntLiteral ::= IntDigit ;


-- | Array Element structure ()
ArrayAccess . ArrayAccess   ::= "[" Expression "]" ;
(:[])       . [ArrayAccess] ::= ArrayAccess ;
(:)					. [ArrayAccess] ::= ArrayAccess [ArrayAccess] ; 


-- | Operators
UBang   . UnaryOperator ::= "!" ;
UMinus  . UnaryOperator ::= "-" ;
ULenght . UnaryOperator ::= "len" ;
UOrd    . UnaryOperator ::= "ord" ;
UChr    . UnaryOperator ::= "char" ;

BTimes    . BinaryOperator ::= "*" ;
BDivide   . BinaryOperator ::= "/" ;
BModulus  . BinaryOperator ::= "%" ;
BPlus     . BinaryOperator ::= "+" ;
BMinus    . BinaryOperator ::= "-" ;
BMore     . BinaryOperator ::= ">" ;
BLess     . BinaryOperator ::= "<" ;
BMoreEqual. BinaryOperator ::= ">=" ;
BLessEqual. BinaryOperator ::= "<=" ;
BEqual    . BinaryOperator ::= "==" ;
BNotEqual . BinaryOperator ::= "!-" ;
BAnd      . BinaryOperator ::= "&&" ;
BOr       . BinaryOperator ::= "||" ;


-- | Tokens recognition
-- Note the @position@ keyword enables us to keep the position in the ADT tree for clearer 
-- semantic analysis error messages. The pseudo regex language used after
-- TODO see which should be kept as tokens and which should be leftout
position token IntDigit (digit+) ;
position token PlusLiteral ({"+"}) ;
position token MinusLiteral ({"-"}) ;
position token BoolLiteral ({"true"} | {"false"}) ;
position token CharLiteral ('\'' ((char - ["'\\\""]) | ('\\' ["'\\nt"])) '\'') ;
position token PairLiteral ({"null"}) ;
position token Identifier (('_' | lower) (letter | digit | '_')*) ;
position token StringLiteral ('"' ((char - ["'\\\""]) | ('\\' ["'\\nt"]))* '"') ;


-- | Comment parser
comment "#" ;