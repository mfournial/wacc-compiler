IntExp.   Exp ::= IntLiteral ;
BoolExp.  Exp ::= BoolLiteral ;
CharExpr. Exp ::= CharLiteral ;
StringExpr. Exp ::= StringLiteral ;
PairExpr. Exp ::= PairLiteral ;
IdentExpr. Exp  ::= Identifier;
ArrayExpr. Exp ::= ArrayElem ;
UExpr. Exp ::= UnaryOperator Exp ;
BExp. Exp ::= Exp BinaryOperator Exp ;
BracketExp. Exp ::= "(" Exp ")" ;

rules BaseType ::= "int" | "bool" | "char" | "string" ;

IntPlus.    IntLiteral ::= Plus IntDigit ;
IntMinus.   IntLiteral ::= Minus IntDigit ;
IntLiteral. IntLiteral ::= IntDigit ;
ArrayElem. ArrayElem ::= Identifier [ArrayAccess];
ArrayAccess. ArrayAccess ::= "[" Exp "]" ;
(:[]). [ArrayAccess] ::=  ArrayAccess ;
(:). [ArrayAccess] ::= ArrayAccess [ArrayAccess] ; 

UBang  . UnaryOperator ::= "!" ;
UMinus . UnaryOperator ::= "-" ;
ULenght. UnaryOperator ::= "len" ;
UOrd   . UnaryOperator ::= "ord" ;
UChr   . UnaryOperator ::= "char" ;

BTimes    . BinaryOperator ::= "*" ;
BDivide   . BinaryOperator ::= "/" ;
BModulus  . BinaryOperator ::= "%" ;
BPlus     . BinaryOperator ::= "+" ;
BMinus    . BinaryOperator ::= "-" ;
BMore     . BinaryOperator ::= ">" ;
BLess     . BinaryOperator ::= "<" ;
BMoreEqual. BinaryOperator ::= ">=" ;
BLessEqual. BinaryOperator ::= "<=" ;
BEqual    . BinaryOperator ::= "==" ;
BNotEqual . BinaryOperator ::= "!-" ;
BAnd      . BinaryOperator ::= "&&" ;
BOr       . BinaryOperator ::= "||" ;

position token IntDigit (digit+) ;
position token Plus ({"+"}) ;
position token Minus ({"-"}) ;


position token BoolLiteral ({"true"} | {"false"}) ;
position token CharLiteral ('\'' ((char - ["'\\\""]) | ('\\' ["'\\nt"])) '\'') ;
position token PairLiteral ({"null"}) ;
position token Identifier (('_' | lower) (letter | digit | '_')*) ;
position token StringLiteral ('"' ((char - ["'\\\""]) | ('\\' ["'\\nt"]))* '"') ;
comment "#" ;