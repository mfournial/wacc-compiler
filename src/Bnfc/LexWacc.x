-- -*- haskell -*-
-- This Alex file was machine-generated by the BNF converter
{
{-# OPTIONS -fno-warn-incomplete-patterns #-}
{-# OPTIONS_GHC -w #-}
module LexWacc where



import qualified Data.Bits
import Data.Word (Word8)
import Data.Char (ord)
}


$l = [a-zA-Z\192 - \255] # [\215 \247]    -- isolatin1 letter FIXME
$c = [A-Z\192-\221] # [\215]    -- capital isolatin1 letter FIXME
$s = [a-z\222-\255] # [\247]    -- small isolatin1 letter FIXME
$d = [0-9]                -- digit
$i = [$l $d _ ']          -- identifier character
$u = [\0-\255]          -- universal: any character

@rsyms =    -- symbols and non-identifier-like reserved words
   \, | \;

:-
"#" [.]* ; -- Toss single line comments

$white+ ;
@rsyms { tok (\p s -> PT p (eitherResIdent (TV . share) s)) }
e n d { ignoreStrToken (\p s -> PT p (eitherResIdent (T_EndT . share) s)) }
b e g i n { tok (\p s -> PT p (eitherResIdent (T_BeginT . share) s)) }
s k i p { tok (\p s -> PT p (eitherResIdent (T_SkipT . share) s)) }
r e a d { tok (\p s -> PT p (eitherResIdent (T_ReadT . share) s)) }
p r i n t { tok (\p s -> PT p (eitherResIdent (T_PrintT . share) s)) }
p r i n t l n { tok (\p s -> PT p (eitherResIdent (T_PrintLnT . share) s)) }
f r e e { tok (\p s -> PT p (eitherResIdent (T_FreeT . share) s)) }
e x i t { tok (\p s -> PT p (eitherResIdent (T_ExitT . share) s)) }
$d + { tok (\p s -> PT p (eitherResIdent (T_IntDigit . share) s)) }
\+ { tok (\p s -> PT p (eitherResIdent (T_PlusToken . share) s)) }
\- { tok (\p s -> PT p (eitherResIdent (T_MinusToken . share) s)) }
t r u e | f a l s e { tok (\p s -> PT p (eitherResIdent (T_BoolLiteral . share) s)) }
i n t { tok (\p s -> PT p (eitherResIdent (T_IntT . share) s)) }
b o o l { tok (\p s -> PT p (eitherResIdent (T_BoolT . share) s)) }
c h a r { tok (\p s -> PT p (eitherResIdent (T_CharT . share) s)) }
s t r i n g { tok (\p s -> PT p (eitherResIdent (T_StringT . share) s)) }
\* { tok (\p s -> PT p (eitherResIdent (T_TimesT . share) s)) }
\/ { tok (\p s -> PT p (eitherResIdent (T_DivideT . share) s)) }
\% { tok (\p s -> PT p (eitherResIdent (T_ModuloT . share) s)) }
\> { tok (\p s -> PT p (eitherResIdent (T_GreaterT . share) s)) }
\< { tok (\p s -> PT p (eitherResIdent (T_LessT . share) s)) }
\> \= { tok (\p s -> PT p (eitherResIdent (T_GreaterEqT . share) s)) }
\< \= { tok (\p s -> PT p (eitherResIdent (T_LessEqT . share) s)) }
\= \= { tok (\p s -> PT p (eitherResIdent (T_EqT . share) s)) }
\! \= { tok (\p s -> PT p (eitherResIdent (T_NotEqT . share) s)) }
\& \& { tok (\p s -> PT p (eitherResIdent (T_AndT . share) s)) }
\| \| { tok (\p s -> PT p (eitherResIdent (T_OrT . share) s)) }
\( { tok (\p s -> PT p (eitherResIdent (T_LParenT . share) s)) }
\) { tok (\p s -> PT p (eitherResIdent (T_RParenT . share) s)) }
\[ { tok (\p s -> PT p (eitherResIdent (T_LBracketT . share) s)) }
\] { tok (\p s -> PT p (eitherResIdent (T_RBracketT . share) s)) }
i s { tok (\p s -> PT p (eitherResIdent (T_IsT . share) s)) }
w h i l e { tok (\p s -> PT p (eitherResIdent (T_WhileT . share) s)) }
d o { tok (\p s -> PT p (eitherResIdent (T_DoT . share) s)) }
d o n e { tok (\p s -> PT p (eitherResIdent (T_DoneT . share) s)) }
i f { tok (\p s -> PT p (eitherResIdent (T_IfT . share) s)) }
f i { tok (\p s -> PT p (eitherResIdent (T_FiT . share) s)) }
t h e n { tok (\p s -> PT p (eitherResIdent (T_ThenT . share) s)) }
e l s e { tok (\p s -> PT p (eitherResIdent (T_ElseT . share) s)) }
p a i r { tok (\p s -> PT p (eitherResIdent (T_PairT . share) s)) }
n e w p a i r { tok (\p s -> PT p (eitherResIdent (T_NewpairT . share) s)) }
c a l l { tok (\p s -> PT p (eitherResIdent (T_CallT . share) s)) }
f s t { tok (\p s -> PT p (eitherResIdent (T_FstT . share) s)) }
s n d { tok (\p s -> PT p (eitherResIdent (T_SndT . share) s)) }
\= { tok (\p s -> PT p (eitherResIdent (T_EqualT . share) s)) }
l e n { tok (\p s -> PT p (eitherResIdent (T_LenT . share) s)) }
o r d { tok (\p s -> PT p (eitherResIdent (T_OrdT . share) s)) }
c h r { tok (\p s -> PT p (eitherResIdent (T_ChrT . share) s)) }
r e t u r n { tok (\p s -> PT p (eitherResIdent (T_ReturnT . share) s)) }
\! { tok (\p s -> PT p (eitherResIdent (T_NotT . share) s)) }
n u l l { tok (\p s -> PT p (eitherResIdent (T_PairLiteral . share) s)) }
\' ($u # [\' \\ \"]| \\ [\' \\ n t 0 b f \"]) \' { tok (\p s -> PT p (eitherResIdent (T_CharLiteral . share) s)) }
\" ($u # [\' \\ \"]| \\ [\' \\ n t 0 b f \"]) * \" { tok (\p s -> PT p (eitherResIdent (T_StringLiteral . share) s)) }
(\_ | $s)($l | $d | \_)* { tok (\p s -> PT p (eitherResIdent (T_Identifier . share) s)) }

$l $i*   { tok (\p s -> PT p (eitherResIdent (TV . share) s)) }





{

tok :: (Posn -> String -> Token) -> (Posn -> String -> Token)
tok f p s = f p s

ignoreStrToken :: (Posn -> String -> Token) -> (Posn -> Token)
ignoreStrToken f p s = f s

share :: String -> String
share = id

data Tok =
   TS !String !Int    -- reserved words and symbols
 | TL !String         -- string literals
 | TI !String         -- integer literals
 | TV !String         -- identifiers
 | TD !String         -- double precision float literals
 | TC !String         -- character literals
 | T_EndT !String
 | T_BeginT !String
 | T_SkipT !String
 | T_ReadT !String
 | T_PrintT !String
 | T_PrintLnT !String
 | T_FreeT !String
 | T_ExitT !String
 | T_IntDigit !String
 | T_PlusToken !String
 | T_MinusToken !String
 | T_BoolLiteral !String
 | T_IntT !String
 | T_BoolT !String
 | T_CharT !String
 | T_StringT !String
 | T_TimesT !String
 | T_DivideT !String
 | T_ModuloT !String
 | T_GreaterT !String
 | T_LessT !String
 | T_GreaterEqT !String
 | T_LessEqT !String
 | T_EqT !String
 | T_NotEqT !String
 | T_AndT !String
 | T_OrT !String
 | T_LParenT !String
 | T_RParenT !String
 | T_LBracketT !String
 | T_RBracketT !String
 | T_IsT !String
 | T_WhileT !String
 | T_DoT !String
 | T_DoneT !String
 | T_IfT !String
 | T_FiT !String
 | T_ThenT !String
 | T_ElseT !String
 | T_PairT !String
 | T_NewpairT !String
 | T_CallT !String
 | T_FstT !String
 | T_SndT !String
 | T_EqualT !String
 | T_LenT !String
 | T_OrdT !String
 | T_ChrT !String
 | T_ReturnT !String
 | T_NotT !String
 | T_PairLiteral !String
 | T_CharLiteral !String
 | T_StringLiteral !String
 | T_Identifier !String

 deriving (Eq,Show,Ord)

data Token =
   PT  Posn Tok
 | Err Posn
  deriving (Eq,Show,Ord)

tokenPos :: [Token] -> String
tokenPos (PT (Pn _ l _) _ :_) = "line " ++ show l
tokenPos (Err (Pn _ l _) :_) = "line " ++ show l
tokenPos _ = "end of file"

tokenPosn :: Token -> Posn
tokenPosn (PT p _) = p
tokenPosn (Err p) = p

tokenLineCol :: Token -> (Int, Int)
tokenLineCol = posLineCol . tokenPosn

posLineCol :: Posn -> (Int, Int)
posLineCol (Pn _ l c) = (l,c)

mkPosToken :: Token -> ((Int, Int), String)
mkPosToken t@(PT p _) = (posLineCol p, prToken t)

prToken :: Token -> String
prToken t = case t of
  PT _ (TS s _) -> s
  PT _ (TL s)   -> show s
  PT _ (TI s)   -> s
  PT _ (TV s)   -> s
  PT _ (TD s)   -> s
  PT _ (TC s)   -> s
  PT _ (T_EndT s) -> s
  PT _ (T_BeginT s) -> s
  PT _ (T_SkipT s) -> s
  PT _ (T_ReadT s) -> s
  PT _ (T_PrintT s) -> s
  PT _ (T_PrintLnT s) -> s
  PT _ (T_FreeT s) -> s
  PT _ (T_ExitT s) -> s
  PT _ (T_IntDigit s) -> s
  PT _ (T_PlusToken s) -> s
  PT _ (T_MinusToken s) -> s
  PT _ (T_BoolLiteral s) -> s
  PT _ (T_IntT s) -> s
  PT _ (T_BoolT s) -> s
  PT _ (T_CharT s) -> s
  PT _ (T_StringT s) -> s
  PT _ (T_TimesT s) -> s
  PT _ (T_DivideT s) -> s
  PT _ (T_ModuloT s) -> s
  PT _ (T_GreaterT s) -> s
  PT _ (T_LessT s) -> s
  PT _ (T_GreaterEqT s) -> s
  PT _ (T_LessEqT s) -> s
  PT _ (T_EqT s) -> s
  PT _ (T_NotEqT s) -> s
  PT _ (T_AndT s) -> s
  PT _ (T_OrT s) -> s
  PT _ (T_LParenT s) -> s
  PT _ (T_RParenT s) -> s
  PT _ (T_LBracketT s) -> s
  PT _ (T_RBracketT s) -> s
  PT _ (T_IsT s) -> s
  PT _ (T_WhileT s) -> s
  PT _ (T_DoT s) -> s
  PT _ (T_DoneT s) -> s
  PT _ (T_IfT s) -> s
  PT _ (T_FiT s) -> s
  PT _ (T_ThenT s) -> s
  PT _ (T_ElseT s) -> s
  PT _ (T_PairT s) -> s
  PT _ (T_NewpairT s) -> s
  PT _ (T_CallT s) -> s
  PT _ (T_FstT s) -> s
  PT _ (T_SndT s) -> s
  PT _ (T_EqualT s) -> s
  PT _ (T_LenT s) -> s
  PT _ (T_OrdT s) -> s
  PT _ (T_ChrT s) -> s
  PT _ (T_ReturnT s) -> s
  PT _ (T_NotT s) -> s
  PT _ (T_PairLiteral s) -> s
  PT _ (T_CharLiteral s) -> s
  PT _ (T_StringLiteral s) -> s
  PT _ (T_Identifier s) -> s


data BTree = N | B String Tok BTree BTree deriving (Show)

eitherResIdent :: (String -> Tok) -> String -> Tok
eitherResIdent tv s = treeFind resWords
  where
  treeFind N = tv s
  treeFind (B a t left right) | s < a  = treeFind left
                              | s > a  = treeFind right
                              | s == a = t

resWords :: BTree
resWords = b ";" 2 (b "," 1 N N) N
   where b s n = let bs = id s
                  in B bs (TS bs n)

unescapeInitTail :: String -> String
unescapeInitTail = id . unesc . tail . id where
  unesc s = case s of
    '\\':c:cs | elem c ['\"', '\\', '\''] -> c : unesc cs
    '\\':'n':cs  -> '\n' : unesc cs
    '\\':'t':cs  -> '\t' : unesc cs
    '"':[]    -> []
    c:cs      -> c : unesc cs
    _         -> []

-------------------------------------------------------------------
-- Alex wrapper code.
-- A modified "posn" wrapper.
-------------------------------------------------------------------

data Posn = Pn !Int !Int !Int
      deriving (Eq, Show,Ord)

alexStartPos :: Posn
alexStartPos = Pn 0 1 1

alexMove :: Posn -> Char -> Posn
alexMove (Pn a l c) '\t' = Pn (a+1)  l     (((c+7) `div` 8)*8+1)
alexMove (Pn a l c) '\n' = Pn (a+1) (l+1)   1
alexMove (Pn a l c) _    = Pn (a+1)  l     (c+1)

type Byte = Word8

type AlexInput = (Posn,     -- current position,
                  Char,     -- previous char
                  [Byte],   -- pending bytes on the current char
                  String)   -- current input string

tokens :: String -> [Token]
tokens str = go (alexStartPos, '\n', [], str)
    where
      go :: AlexInput -> [Token]
      go inp@(pos, _, _, str) =
               case alexScan inp 0 of
                AlexEOF                   -> []
                AlexError (pos, _, _, _)  -> [Err pos]
                AlexSkip  inp' len        -> go inp'
                AlexToken inp' len act    -> act pos (take len str) : (go inp')

alexGetByte :: AlexInput -> Maybe (Byte,AlexInput)
alexGetByte (p, c, (b:bs), s) = Just (b, (p, c, bs, s))
alexGetByte (p, _, [], s) =
  case  s of
    []  -> Nothing
    (c:s) ->
             let p'     = alexMove p c
                 (b:bs) = utf8Encode c
              in p' `seq` Just (b, (p', c, bs, s))

alexInputPrevChar :: AlexInput -> Char
alexInputPrevChar (p, c, bs, s) = c

-- | Encode a Haskell String to a list of Word8 values, in UTF8 format.
utf8Encode :: Char -> [Word8]
utf8Encode = map fromIntegral . go . ord
 where
  go oc
   | oc <= 0x7f       = [oc]

   | oc <= 0x7ff      = [ 0xc0 + (oc `Data.Bits.shiftR` 6)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]

   | oc <= 0xffff     = [ 0xe0 + (oc `Data.Bits.shiftR` 12)
                        , 0x80 + ((oc `Data.Bits.shiftR` 6) Data.Bits..&. 0x3f)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]
   | otherwise        = [ 0xf0 + (oc `Data.Bits.shiftR` 18)
                        , 0x80 + ((oc `Data.Bits.shiftR` 12) Data.Bits..&. 0x3f)
                        , 0x80 + ((oc `Data.Bits.shiftR` 6) Data.Bits..&. 0x3f)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]
}
