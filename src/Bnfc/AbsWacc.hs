

module AbsWacc where

-- Haskell module generated by the BNF converter

data Position = Pos (Int, Int)


newtype EndT = EndT Position
  deriving (Eq, Ord, Show, Read)
newtype BeginT = BeginT (Position,String)
  deriving (Eq, Ord, Show, Read)
newtype SkipT = SkipT (Position,String)
  deriving (Eq, Ord, Show, Read)
newtype ReadT = ReadT (Position,String)
  deriving (Eq, Ord, Show, Read)
newtype PrintT = PrintT (Position,String)
  deriving (Eq, Ord, Show, Read)
newtype PrintLnT = PrintLnT (Position,String)
  deriving (Eq, Ord, Show, Read)
newtype FreeT = FreeT (Position,String)
  deriving (Eq, Ord, Show, Read)
newtype ExitT = ExitT (Position,String)
  deriving (Eq, Ord, Show, Read)
newtype IntDigit = IntDigit (Position,String)
  deriving (Eq, Ord, Show, Read)
newtype PlusToken = PlusToken (Position,String)
  deriving (Eq, Ord, Show, Read)
newtype MinusToken = MinusToken (Position,String)
  deriving (Eq, Ord, Show, Read)
newtype BoolLiteral = BoolLiteral (Position,String)
  deriving (Eq, Ord, Show, Read)
newtype IntT = IntT (Position,String)
  deriving (Eq, Ord, Show, Read)
newtype BoolT = BoolT (Position,String)
  deriving (Eq, Ord, Show, Read)
newtype CharT = CharT (Position,String)
  deriving (Eq, Ord, Show, Read)
newtype StringT = StringT (Position,String)
  deriving (Eq, Ord, Show, Read)
newtype TimesT = TimesT (Position,String)
  deriving (Eq, Ord, Show, Read)
newtype DivideT = DivideT (Position,String)
  deriving (Eq, Ord, Show, Read)
newtype ModuloT = ModuloT (Position,String)
  deriving (Eq, Ord, Show, Read)
newtype GreaterT = GreaterT (Position,String)
  deriving (Eq, Ord, Show, Read)
newtype LessT = LessT (Position,String)
  deriving (Eq, Ord, Show, Read)
newtype GreaterEqT = GreaterEqT (Position,String)
  deriving (Eq, Ord, Show, Read)
newtype LessEqT = LessEqT (Position,String)
  deriving (Eq, Ord, Show, Read)
newtype EqT = EqT (Position,String) deriving (Eq, Ord, Show, Read)
newtype NotEqT = NotEqT (Position,String)
  deriving (Eq, Ord, Show, Read)
newtype AndT = AndT (Position,String)
  deriving (Eq, Ord, Show, Read)
newtype OrT = OrT (Position,String) deriving (Eq, Ord, Show, Read)
newtype LParenT = LParenT (Position,String)
  deriving (Eq, Ord, Show, Read)
newtype RParenT = RParenT (Position,String)
  deriving (Eq, Ord, Show, Read)
newtype LBracketT = LBracketT (Position,String)
  deriving (Eq, Ord, Show, Read)
newtype RBracketT = RBracketT (Position,String)
  deriving (Eq, Ord, Show, Read)
newtype IsT = IsT (Position,String) deriving (Eq, Ord, Show, Read)
newtype WhileT = WhileT (Position,String)
  deriving (Eq, Ord, Show, Read)
newtype DoT = DoT (Position,String) deriving (Eq, Ord, Show, Read)
newtype DoneT = DoneT (Position,String)
  deriving (Eq, Ord, Show, Read)
newtype IfT = IfT (Position,String) deriving (Eq, Ord, Show, Read)
newtype FiT = FiT (Position,String) deriving (Eq, Ord, Show, Read)
newtype ThenT = ThenT (Position,String)
  deriving (Eq, Ord, Show, Read)
newtype ElseT = ElseT (Position,String)
  deriving (Eq, Ord, Show, Read)
newtype PairT = PairT (Position,String)
  deriving (Eq, Ord, Show, Read)
newtype NewpairT = NewpairT (Position,String)
  deriving (Eq, Ord, Show, Read)
newtype CallT = CallT (Position,String)
  deriving (Eq, Ord, Show, Read)
newtype FstT = FstT (Position,String)
  deriving (Eq, Ord, Show, Read)
newtype SndT = SndT (Position,String)
  deriving (Eq, Ord, Show, Read)
newtype EqualT = EqualT (Position,String)
  deriving (Eq, Ord, Show, Read)
newtype LenT = LenT (Position,String)
  deriving (Eq, Ord, Show, Read)
newtype OrdT = OrdT (Position,String)
  deriving (Eq, Ord, Show, Read)
newtype ChrT = ChrT (Position,String)
  deriving (Eq, Ord, Show, Read)
newtype ReturnT = ReturnT (Position,String)
  deriving (Eq, Ord, Show, Read)
newtype NotT = NotT (Position,String)
  deriving (Eq, Ord, Show, Read)
newtype PairLiteral = PairLiteral (Position,String)
  deriving (Eq, Ord, Show, Read)
newtype CharLiteral = CharLiteral (Position,String)
  deriving (Eq, Ord, Show, Read)
newtype StringLiteral = StringLiteral (Position,String)
  deriving (Eq, Ord, Show, Read)
newtype Identifier = Identifier (Position,String)
  deriving (Eq, Ord, Show, Read)
data WaccTree = WaccTree Program
  deriving (Eq, Ord, Show, Read)

data Program = Program BeginT [Function] [Statement] EndT
  deriving (Eq, Ord, Show, Read)

data Function
    = Function Type Identifier LParenT [Parameter] RParenT IsT [Statement] EndT
  deriving (Eq, Ord, Show, Read)

data Parameter = Param Type Identifier
  deriving (Eq, Ord, Show, Read)

data Statement
    = StatSkip SkipT
    | StatDecAss Type Identifier EqualT AssignRhs
    | StatAss AssignLhs EqualT AssignRhs
    | StatRead ReadT AssignLhs
    | StatFree FreeT Expression
    | StatReturn ReturnT Expression
    | StatExit ExitT Expression
    | StatPrint PrintT Expression
    | StatPrintLn PrintLnT Expression
    | StatIf IfT Expression ThenT [Statement] ElseT [Statement] FiT
    | StatWhile WhileT Expression DoT [Statement] DoneT
    | StatScope BeginT [Statement] EndT
  deriving (Eq, Ord, Show, Read)

data AssignLhs
    = AssignToIdent Identifier
    | AssignToArrayElem ArrayElem
    | AssignToPair PairElem
  deriving (Eq, Ord, Show, Read)

data AssignRhs
    = AssignExp Expression
    | AssignArrayLit ArrayLiteral
    | AssignPair NewpairT LParenT Expression Expression RParenT
    | AssignPairElem PairElem
    | AssignFunctionCall CallT Identifier LParenT [ArgumentList] RParenT
  deriving (Eq, Ord, Show, Read)

data ArgumentList = ArgumentList Expression
  deriving (Eq, Ord, Show, Read)

data PairElem = PairFst FstT Expression | PairSnd SndT Expression
  deriving (Eq, Ord, Show, Read)

data Type
    = BaseType BaseType
    | ArrayType ArrayDeclarationLiteral
    | PairType PairT LParenT PairElemType PairElemType RParenT
  deriving (Eq, Ord, Show, Read)

data BaseType
    = IntType IntT
    | BoolType BoolT
    | CharType CharT
    | StringType StringT
  deriving (Eq, Ord, Show, Read)

data ArrayDeclarationLiteral
    = ArrayDeclarationLiteral Type LBracketT RBracketT
  deriving (Eq, Ord, Show, Read)

data ArrayElem = ArrayElem Identifier [ArrayAccess]
  deriving (Eq, Ord, Show, Read)

data ArrayAccess = ArrayAccess LBracketT Expression RBracketT
  deriving (Eq, Ord, Show, Read)

data ArrayLiteral
    = ArrayLiteral LBracketT [ArrayLiteralElem] RBracketT
  deriving (Eq, Ord, Show, Read)

data ArrayLiteralElem = ArrayLiteralElem Expression
  deriving (Eq, Ord, Show, Read)

data PairElemType
    = PairElemTypeBase BaseType
    | PairElemTypeArray ArrayDeclarationLiteral
    | PairElemTypePair PairT
  deriving (Eq, Ord, Show, Read)

data Expression
    = IntExp IntLiteral
    | BoolExp BoolLiteral
    | CharExpr CharLiteral
    | StringExpr StringLiteral
    | PairExpr PairLiteral
    | IdentExpr Identifier
    | ArrayExpr ArrayElem
    | UExpr UnaryOperator Expression
    | BExp Expression BinaryOperator Expression
    | BracketExp LParenT Expression RParenT
  deriving (Eq, Ord, Show, Read)

data UnaryOperator
    = UBang NotT
    | UMinus MinusToken
    | ULength LenT
    | UOrd OrdT
    | UChr ChrT
  deriving (Eq, Ord, Show, Read)

data BinaryOperator
    = BTimes TimesT
    | BDivide DivideT
    | BModulus ModuloT
    | BPlus PlusToken
    | BMinus MinusToken
    | BGreater GreaterT
    | BLess LessT
    | BGreaterEqual GreaterEqT
    | BLessEqual LessEqT
    | BEqual EqT
    | BNotEqual NotEqT
    | BAnd AndT
    | BOr OrT
  deriving (Eq, Ord, Show, Read)

data IntLiteral
    = IntPlus PlusToken IntDigit
    | IntMinus MinusToken IntDigit
    | IntLiteral IntDigit
  deriving (Eq, Ord, Show, Read)

