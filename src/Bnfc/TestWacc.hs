-- automatically generated by BNF Converter
module Main where


import System.Environment ( getArgs, getProgName )
import System.Exit ( exitFailure, exitSuccess )
import System.IO ( stdin, hGetContents )
import Control.Monad ( when )

import Bnfc.LexWacc
import Bnfc.ParWacc
import Bnfc.SkelWacc
import Bnfc.PrintWacc
import Bnfc.AbsWacc
import Data.Waskell.Error


type ParseFunction a = [Token] -> ErrorList a

type Verbosity = Int

putStrV :: Verbosity -> String -> IO ()
putStrV v s = when (v > 1) $ putStrLn s

runFile :: Verbosity -> ParseFunction WaccTree -> FilePath -> IO ()
runFile v p f = putStrLn f >> readFile f >>= run v p



run :: Verbosity -> ParseFunction WaccTree -> String -> IO ()
run v parser input = showTree v parseErr >> displayErrorsAndExit parseErr
  where
   parseErr :: ErrorList WaccTree
   parseErr = myLexer input >>= parser

showTree :: Int -> ErrorList WaccTree -> IO ()
showTree v (ErrorList (Just tree) _)
 = do
      putStrV v $ "\n[Abstract Syntax]\n\n" ++ show tree
      putStrV v $ "\n[Linearized tree]\n\n" ++ printTree tree
showTree v (ErrorList Nothing _) = return ()

usage :: IO ()
usage = do
  putStrLn $ unlines
    [ "usage: Call with one of the following argument combinations:"
    , "  --help          Display this help message."
    , "  (no arguments)  Parse stdin verbosely."
    , "  (files)         Parse content of files verbosely."
    , "  -s (files)      Silent mode. Parse content otherwisef files silently."
    ]
  exitFailure

main :: IO ()
main = do
  args <- getArgs
  case args of
    ["--help"] -> usage
    [] -> hGetContents stdin >>= run 2 pExp
    "-s":fs -> mapM_ (runFile 0 pExp) fs
    fs -> mapM_ (runFile 2 pExp) fs




