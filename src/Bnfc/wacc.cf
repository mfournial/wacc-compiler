-- | WACC TREE
WaccTree . Exp ::= Program ;


-- | Program Root
Program . Program ::= BeginT [Function] [Statement] EndT ;


-- | Function
Function . Function ::= Type Identifier LParenT [Parameter] RParenT IsT [Statement] EndT ;
terminator Function "" ; 


-- | Parameter
Param . Parameter ::= Type Identifier ;
separator Parameter "," ;


-- | Statements
StatSkip     . Statement ::= SkipT ;
StatDecAss   . Statement ::= Type Identifier EqualT AssignRhs ;
StatAss      . Statement ::= AssignLhs EqualT  AssignRhs ;
StatRead     . Statement ::= ReadT AssignLhs ;
StatFree     . Statement ::= FreeT Expression ;
StatReturn   . Statement ::= ReturnT Expression;
StatExit     . Statement ::= ExitT Expression ;
StatPrint    . Statement ::= PrintT Expression ;
StatPrintLn  . Statement ::= PrintLnT Expression ;
StatIf       . Statement ::= IfT Expression ThenT [Statement] ElseT [Statement] FiT ;
StatWhile    . Statement ::= WhileT Expression DoT [Statement] DoneT ;
StatScope    . Statement ::= BeginT [Statement] EndT;

(:[]). [Statement] ::= Statement ;
(:)  . [Statement] ::= Statement ";" [Statement] ;


-- | Assign left hand side (LHS)
AssignToIdent    . AssignLhs ::= Identifier ;
AssignToArrayElem. AssignLhs ::= ArrayElem ;
AssignToPair     . AssignLhs ::= PairElem ;


-- | Assign Right hand side (RHS)
AssignExp          . AssignRhs ::= Expression ;
AssignArrayLit     . AssignRhs ::= ArrayLiteral ;
AssignPair         . AssignRhs ::= NewpairT LParenT Expression "," Expression RParenT ;
AssignPairElem     . AssignRhs ::= PairElem ;
AssignFunctionCall . AssignRhs ::= CallT Identifier LParenT [ArgumentList] RParenT ;


-- | Argument list for calling function
ArgumentList . ArgumentList ::= Expression;
separator ArgumentList "," ;


-- | Pair Element return
PairFst . PairElem ::= FstT Expression ;
PairSnd . PairElem ::= SndT Expression ;


-- | Global types
BaseType  . Type ::= BaseType ;
ArrayType . Type ::= ArrayDeclarationLiteral ;
PairType  . Type ::= PairT LBracketT PairElemType "," PairElemType RParenT ;


-- | Base type
IntType    . BaseType ::= IntT ;
BoolType   . BaseType ::= BoolT ;
CharType   . BaseType ::= CharT ;
StringType . BaseType ::= StringT ;

-- | Array Type Declaration literal
ArrayDeclarationLiteral . ArrayDeclarationLiteral ::= Type LBracketT RBracketT ;

ArrayElem   .  ArrayElem    ::= Identifier [ArrayAccess] ;
ArrayAccess .  ArrayAccess  ::= LBracketT Expression RBracketT ;
(:[])       . [ArrayAccess] ::= ArrayAccess ;
(:)   		  . [ArrayAccess] ::= ArrayAccess [ArrayAccess] ;

ArrayLiteral     . ArrayLiteral     ::= LBracketT [ArrayLiteralElem] RBracketT ;
ArrayLiteralElem . ArrayLiteralElem ::= Expression ;
separator ArrayLiteralElem "," ;


-- | Pair Element type
PairElemTypeBase  . PairElemType ::= BaseType ;
PairElemTypeArray . PairElemType ::= ArrayDeclarationLiteral ;
PairElemTypePair  . PairElemType ::= PairT ;


-- | Expression
IntExp     . Expression ::= IntLiteral ;
BoolExp    . Expression ::= BoolLiteral ;
CharExpr   . Expression ::= CharLiteral ;
StringExpr . Expression ::= StringLiteral ;
PairExpr   . Expression ::= PairLiteral ;
IdentExpr  . Expression ::= Identifier ;
ArrayExpr  . Expression ::= ArrayElem ;
UExpr      . Expression ::= UnaryOperator Expression ;
BExp       . Expression ::= Expression BinaryOperator Expression ;
BracketExp . Expression ::= LParenT Expression RParenT ;


-- | Operators
UBang   . UnaryOperator ::= NotT ;
UMinus  . UnaryOperator ::= MinusToken ;
ULength . UnaryOperator ::= LenT ;
UOrd    . UnaryOperator ::= OrdT ;
UChr    . UnaryOperator ::= ChrT ;


BTimes        . BinaryOperator ::= TimesT ;
BDivide       . BinaryOperator ::= DivideT ;
BModulus      . BinaryOperator ::= ModuloT ;
BPlus         . BinaryOperator ::= PlusToken;
BMinus     	  . BinaryOperator ::= MinusToken;
BGreater      . BinaryOperator ::= GreaterT;
BLess         . BinaryOperator ::= LessT ;
BGreaterEqual . BinaryOperator ::= GreaterEqT ;
BLessEqual    . BinaryOperator ::= LessEqT ;
BEqual        . BinaryOperator ::= EqualT ;
BNotEqual     . BinaryOperator ::= NotEqT ;
BAnd          . BinaryOperator ::= AndT ;
BOr           . BinaryOperator ::= OrT ;

-- | Int literal declaration data
IntPlus    . IntLiteral ::= PlusToken IntDigit ;
IntMinus   . IntLiteral ::= MinusToken IntDigit ;
IntLiteral . IntLiteral ::= IntDigit ;


-- | Tokens recognition
-- Note the @position@ keyword enables us to keep the position in the ADT tree for clearer 
-- semantic analysis error messages. The pseudo regex language used after
-- TODO see which should be kept as tokens and which should be leftout
position token IntDigit (digit+) ;
position token PlusToken ('+') ;
position token MinusToken ('-') ;
position token BoolLiteral ({"true"} | {"false"}) ;
position token IntT ({"int"}) ;
position token BoolT ({"bool"}) ;
position token CharT ({"char"}) ;
position token StringT ({"string"}) ;
position token TimesT ({"*"}) ;
position token DivideT ({"/"}) ;
position token ModuloT ({"%"}) ;
position token GreaterT ({">"}) ;
position token LessT ({"<"}) ;
position token GreaterEqT ({">="}) ;
position token LessEqT ({"<="}) ;
position token EqT ({"=="}) ;
position token NotEqT ({"!="}) ;
position token AndT ({"&&"}) ;
position token OrT ({"||"}) ;
position token SkipT ({"skip"}) ;
position token ReadT ({"read"}) ;
position token PrintT ({"print"}) ;
position token PrintLnT ({"println"}) ;
position token FreeT ({"free"}) ;
position token ExitT ({"exit"}) ;
position token LParenT ('(') ;
position token RParenT (')') ;
position token LBracketT ('[') ;
position token RBracketT (']') ;
position token IsT ({"is"}) ;
position token WhileT ({"while"}) ;
position token DoT ({"do"}) ;
position token DoneT ({"done"}) ;
position token IfT ({"if"}) ;
position token FiT ({"fi"}) ;
position token ThenT ({"then"}) ;
position token ElseT ({"else"}) ;
position token EndT ({"end"}) ;
position token BeginT ({"begin"}) ;
position token PairT ({"pair"}) ;
position token NewpairT ({"newpair"}) ;
position token CallT ({"call"}) ;
position token FstT ({"fst"}) ;
position token SndT ({"snd"}) ;
position token EqualT ('=') ;
position token LenT ({"len"}) ;
position token OrdT ({"ord"}) ;
position token ChrT ({"chr"}) ;
position token ReturnT ({"return"}) ;
position token NotT ('!') ;
position token CharLiteral ('\'' ((char - ["'\\\""]) | ('\\' ["'\\nt0bf\""])) '\'') ;
position token PairLiteral ({"null"}) ;
position token Identifier (('_' | lower) (letter | digit | '_')*) ;
position token StringLiteral ('"' ((char - ["'\\\""]) | ('\\' ["'\\nt0bf\""]))* '"') ;


-- | Comment parser
comment "#" ;
