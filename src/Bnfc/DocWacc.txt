The Language wacc
BNF Converter


%This txt2tags file is machine-generated by the BNF-converter
%Process by txt2tags to generate html or latex



This document was automatically generated by the //BNF-Converter//. It was generated together with the lexer, the parser, and the abstract syntax module, which guarantees that the document matches with the implementation of the language (provided no hand-hacking has taken place).

==The lexical structure of wacc==

===Literals===























































EndT literals are recognized by the regular expression
`````{"end"}`````

BeginT literals are recognized by the regular expression
`````{"begin"}`````

SkipT literals are recognized by the regular expression
`````{"skip"}`````

ReadT literals are recognized by the regular expression
`````{"read"}`````

PrintT literals are recognized by the regular expression
`````{"print"}`````

PrintLnT literals are recognized by the regular expression
`````{"println"}`````

FreeT literals are recognized by the regular expression
`````{"free"}`````

ExitT literals are recognized by the regular expression
`````{"exit"}`````

IntDigit literals are recognized by the regular expression
`````digit+`````

PlusToken literals are recognized by the regular expression
`````'+'`````

MinusToken literals are recognized by the regular expression
`````'-'`````

BoolLiteral literals are recognized by the regular expression
`````{"true"} | {"false"}`````

IntT literals are recognized by the regular expression
`````{"int"}`````

BoolT literals are recognized by the regular expression
`````{"bool"}`````

CharT literals are recognized by the regular expression
`````{"char"}`````

StringT literals are recognized by the regular expression
`````{"string"}`````

TimesT literals are recognized by the regular expression
`````{"*"}`````

DivideT literals are recognized by the regular expression
`````{"/"}`````

ModuloT literals are recognized by the regular expression
`````{"%"}`````

GreaterT literals are recognized by the regular expression
`````{">"}`````

LessT literals are recognized by the regular expression
`````{"<"}`````

GreaterEqT literals are recognized by the regular expression
`````{">="}`````

LessEqT literals are recognized by the regular expression
`````{"<="}`````

EqT literals are recognized by the regular expression
`````{"=="}`````

NotEqT literals are recognized by the regular expression
`````{"!="}`````

AndT literals are recognized by the regular expression
`````{"&&"}`````

OrT literals are recognized by the regular expression
`````{"||"}`````

LParenT literals are recognized by the regular expression
`````'('`````

RParenT literals are recognized by the regular expression
`````')'`````

LBracketT literals are recognized by the regular expression
`````'['`````

RBracketT literals are recognized by the regular expression
`````']'`````

IsT literals are recognized by the regular expression
`````{"is"}`````

WhileT literals are recognized by the regular expression
`````{"while"}`````

DoT literals are recognized by the regular expression
`````{"do"}`````

DoneT literals are recognized by the regular expression
`````{"done"}`````

IfT literals are recognized by the regular expression
`````{"if"}`````

FiT literals are recognized by the regular expression
`````{"fi"}`````

ThenT literals are recognized by the regular expression
`````{"then"}`````

ElseT literals are recognized by the regular expression
`````{"else"}`````

PairT literals are recognized by the regular expression
`````{"pair"}`````

NewpairT literals are recognized by the regular expression
`````{"newpair"}`````

CallT literals are recognized by the regular expression
`````{"call"}`````

FstT literals are recognized by the regular expression
`````{"fst"}`````

SndT literals are recognized by the regular expression
`````{"snd"}`````

EqualT literals are recognized by the regular expression
`````'='`````

LenT literals are recognized by the regular expression
`````{"len"}`````

OrdT literals are recognized by the regular expression
`````{"ord"}`````

ChrT literals are recognized by the regular expression
`````{"chr"}`````

ReturnT literals are recognized by the regular expression
`````{"return"}`````

NotT literals are recognized by the regular expression
`````'!'`````

PairLiteral literals are recognized by the regular expression
`````{"null"}`````

CharLiteral literals are recognized by the regular expression
`````''' (char - ["'\""] | '\' ["'\nt0bf""]) '''`````

StringLiteral literals are recognized by the regular expression
`````'"' (char - ["'\""] | '\' ["'\nt0bf""])* '"'`````

Identifier literals are recognized by the regular expression
`````('_' | lower) (letter | digit | '_')*`````


===Reserved words and symbols===
The set of reserved words is the set of terminals appearing in the grammar. Those reserved words that consist of non-letter characters are called symbols, and they are treated in a different way from those that are similar to identifiers. The lexer follows rules familiar from languages like Haskell, C, and Java, including longest match and spacing conventions.

The reserved words used in wacc are the following:

There are no reserved words in wacc.

The symbols used in wacc are the following:
  | , | ; |  | 

===Comments===
Single-line comments begin with #.There are no multiple-line comments in the grammar.

==The syntactic structure of wacc==
Non-terminals are enclosed between < and >. 
The symbols -> (production),  **|**  (union) 
and **eps** (empty rule) belong to the BNF notation. 
All other symbols are terminals.

  | //Exp// | -> | //Program// 
  | //Program// | -> | //BeginT// //[Function]// //[Statement]// //EndT// 
  | //Function// | -> | //Type// //Identifier// //LParenT// //[Parameter]// //RParenT// //IsT// //[Statement]// //EndT// 
  | //[Function]// | -> | **eps**
  |  |  **|**  | //Function// //[Function]// 
  | //Parameter// | -> | //Type// //Identifier// 
  | //[Parameter]// | -> | **eps**
  |  |  **|**  | //Parameter// 
  |  |  **|**  | //Parameter// ``,`` //[Parameter]// 
  | //Statement// | -> | //SkipT// 
  |  |  **|**  | //Type// //Identifier// //EqualT// //AssignRhs// 
  |  |  **|**  | //AssignLhs// //EqualT// //AssignRhs// 
  |  |  **|**  | //ReadT// //AssignLhs// 
  |  |  **|**  | //FreeT// //Expression// 
  |  |  **|**  | //ReturnT// //Expression// 
  |  |  **|**  | //ExitT// //Expression// 
  |  |  **|**  | //PrintT// //Expression// 
  |  |  **|**  | //PrintLnT// //Expression// 
  |  |  **|**  | //IfT// //Expression// //ThenT// //[Statement]// //ElseT// //[Statement]// //FiT// 
  |  |  **|**  | //WhileT// //Expression// //DoT// //[Statement]// //DoneT// 
  |  |  **|**  | //BeginT// //[Statement]// //EndT// 
  | //[Statement]// | -> | //Statement// 
  |  |  **|**  | //Statement// ``;`` //[Statement]// 
  | //AssignLhs// | -> | //Identifier// 
  |  |  **|**  | //ArrayElem// 
  |  |  **|**  | //PairElem// 
  | //AssignRhs// | -> | //Expression// 
  |  |  **|**  | //ArrayLiteral// 
  |  |  **|**  | //NewpairT// //LParenT// //Expression// ``,`` //Expression// //RParenT// 
  |  |  **|**  | //PairElem// 
  |  |  **|**  | //CallT// //Identifier// //LParenT// //[ArgumentList]// //RParenT// 
  | //ArgumentList// | -> | //Expression// 
  | //[ArgumentList]// | -> | **eps**
  |  |  **|**  | //ArgumentList// 
  |  |  **|**  | //ArgumentList// ``,`` //[ArgumentList]// 
  | //PairElem// | -> | //FstT// //Expression// 
  |  |  **|**  | //SndT// //Expression// 
  | //Type// | -> | //BaseType// 
  |  |  **|**  | //ArrayDeclarationLiteral// 
  |  |  **|**  | //PairT// //LParenT// //PairElemType// ``,`` //PairElemType// //RParenT// 
  | //BaseType// | -> | //IntT// 
  |  |  **|**  | //BoolT// 
  |  |  **|**  | //CharT// 
  |  |  **|**  | //StringT// 
  | //ArrayDeclarationLiteral// | -> | //Type// //LBracketT// //RBracketT// 
  | //ArrayElem// | -> | //Identifier// //[ArrayAccess]// 
  | //ArrayAccess// | -> | //LBracketT// //Expression// //RBracketT// 
  | //[ArrayAccess]// | -> | //ArrayAccess// 
  |  |  **|**  | //ArrayAccess// //[ArrayAccess]// 
  | //ArrayLiteral// | -> | //LBracketT// //[ArrayLiteralElem]// //RBracketT// 
  | //ArrayLiteralElem// | -> | //Expression// 
  | //[ArrayLiteralElem]// | -> | **eps**
  |  |  **|**  | //ArrayLiteralElem// 
  |  |  **|**  | //ArrayLiteralElem// ``,`` //[ArrayLiteralElem]// 
  | //PairElemType// | -> | //BaseType// 
  |  |  **|**  | //ArrayDeclarationLiteral// 
  |  |  **|**  | //PairT// 
  | //Expression// | -> | //IntLiteral// 
  |  |  **|**  | //BoolLiteral// 
  |  |  **|**  | //CharLiteral// 
  |  |  **|**  | //StringLiteral// 
  |  |  **|**  | //PairLiteral// 
  |  |  **|**  | //Identifier// 
  |  |  **|**  | //ArrayElem// 
  |  |  **|**  | //UnaryOperator// //Expression// 
  |  |  **|**  | //Expression// //BinaryOperator// //Expression// 
  |  |  **|**  | //LParenT// //Expression// //RParenT// 
  | //UnaryOperator// | -> | //NotT// 
  |  |  **|**  | //MinusToken// 
  |  |  **|**  | //LenT// 
  |  |  **|**  | //OrdT// 
  |  |  **|**  | //ChrT// 
  | //BinaryOperator// | -> | //TimesT// 
  |  |  **|**  | //DivideT// 
  |  |  **|**  | //ModuloT// 
  |  |  **|**  | //PlusToken// 
  |  |  **|**  | //MinusToken// 
  |  |  **|**  | //GreaterT// 
  |  |  **|**  | //LessT// 
  |  |  **|**  | //GreaterEqT// 
  |  |  **|**  | //LessEqT// 
  |  |  **|**  | //EqT// 
  |  |  **|**  | //NotEqT// 
  |  |  **|**  | //AndT// 
  |  |  **|**  | //OrT// 
  | //IntLiteral// | -> | //PlusToken// //IntDigit// 
  |  |  **|**  | //MinusToken// //IntDigit// 
  |  |  **|**  | //IntDigit// 


