module SkelWacc where

-- Haskell module generated by the BNF converter

import AbsWacc
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transEndT :: EndT -> Result
transEndT x = case x of
  EndT string -> failure x
transBeginT :: BeginT -> Result
transBeginT x = case x of
  BeginT string -> failure x
transSkipT :: SkipT -> Result
transSkipT x = case x of
  SkipT string -> failure x
transReadT :: ReadT -> Result
transReadT x = case x of
  ReadT string -> failure x
transPrintT :: PrintT -> Result
transPrintT x = case x of
  PrintT string -> failure x
transPrintLnT :: PrintLnT -> Result
transPrintLnT x = case x of
  PrintLnT string -> failure x
transFreeT :: FreeT -> Result
transFreeT x = case x of
  FreeT string -> failure x
transExitT :: ExitT -> Result
transExitT x = case x of
  ExitT string -> failure x
transIntDigit :: IntDigit -> Result
transIntDigit x = case x of
  IntDigit string -> failure x
transPlusToken :: PlusToken -> Result
transPlusToken x = case x of
  PlusToken string -> failure x
transMinusToken :: MinusToken -> Result
transMinusToken x = case x of
  MinusToken string -> failure x
transBoolLiteral :: BoolLiteral -> Result
transBoolLiteral x = case x of
  BoolLiteral string -> failure x
transIntT :: IntT -> Result
transIntT x = case x of
  IntT string -> failure x
transBoolT :: BoolT -> Result
transBoolT x = case x of
  BoolT string -> failure x
transCharT :: CharT -> Result
transCharT x = case x of
  CharT string -> failure x
transStringT :: StringT -> Result
transStringT x = case x of
  StringT string -> failure x
transTimesT :: TimesT -> Result
transTimesT x = case x of
  TimesT string -> failure x
transDivideT :: DivideT -> Result
transDivideT x = case x of
  DivideT string -> failure x
transModuloT :: ModuloT -> Result
transModuloT x = case x of
  ModuloT string -> failure x
transGreaterT :: GreaterT -> Result
transGreaterT x = case x of
  GreaterT string -> failure x
transLessT :: LessT -> Result
transLessT x = case x of
  LessT string -> failure x
transGreaterEqT :: GreaterEqT -> Result
transGreaterEqT x = case x of
  GreaterEqT string -> failure x
transLessEqT :: LessEqT -> Result
transLessEqT x = case x of
  LessEqT string -> failure x
transEqT :: EqT -> Result
transEqT x = case x of
  EqT string -> failure x
transNotEqT :: NotEqT -> Result
transNotEqT x = case x of
  NotEqT string -> failure x
transAndT :: AndT -> Result
transAndT x = case x of
  AndT string -> failure x
transOrT :: OrT -> Result
transOrT x = case x of
  OrT string -> failure x
transLParenT :: LParenT -> Result
transLParenT x = case x of
  LParenT string -> failure x
transRParenT :: RParenT -> Result
transRParenT x = case x of
  RParenT string -> failure x
transLBracketT :: LBracketT -> Result
transLBracketT x = case x of
  LBracketT string -> failure x
transRBracketT :: RBracketT -> Result
transRBracketT x = case x of
  RBracketT string -> failure x
transIsT :: IsT -> Result
transIsT x = case x of
  IsT string -> failure x
transWhileT :: WhileT -> Result
transWhileT x = case x of
  WhileT string -> failure x
transDoT :: DoT -> Result
transDoT x = case x of
  DoT string -> failure x
transDoneT :: DoneT -> Result
transDoneT x = case x of
  DoneT string -> failure x
transIfT :: IfT -> Result
transIfT x = case x of
  IfT string -> failure x
transFiT :: FiT -> Result
transFiT x = case x of
  FiT string -> failure x
transThenT :: ThenT -> Result
transThenT x = case x of
  ThenT string -> failure x
transElseT :: ElseT -> Result
transElseT x = case x of
  ElseT string -> failure x
transPairT :: PairT -> Result
transPairT x = case x of
  PairT string -> failure x
transNewpairT :: NewpairT -> Result
transNewpairT x = case x of
  NewpairT string -> failure x
transCallT :: CallT -> Result
transCallT x = case x of
  CallT string -> failure x
transFstT :: FstT -> Result
transFstT x = case x of
  FstT string -> failure x
transSndT :: SndT -> Result
transSndT x = case x of
  SndT string -> failure x
transEqualT :: EqualT -> Result
transEqualT x = case x of
  EqualT string -> failure x
transLenT :: LenT -> Result
transLenT x = case x of
  LenT string -> failure x
transOrdT :: OrdT -> Result
transOrdT x = case x of
  OrdT string -> failure x
transChrT :: ChrT -> Result
transChrT x = case x of
  ChrT string -> failure x
transReturnT :: ReturnT -> Result
transReturnT x = case x of
  ReturnT string -> failure x
transNotT :: NotT -> Result
transNotT x = case x of
  NotT string -> failure x
transPairLiteral :: PairLiteral -> Result
transPairLiteral x = case x of
  PairLiteral string -> failure x
transCharLiteral :: CharLiteral -> Result
transCharLiteral x = case x of
  CharLiteral string -> failure x
transStringLiteral :: StringLiteral -> Result
transStringLiteral x = case x of
  StringLiteral string -> failure x
transIdentifier :: Identifier -> Result
transIdentifier x = case x of
  Identifier string -> failure x
transExp :: Exp -> Result
transExp x = case x of
  WaccTree program -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  Program begint functions statements endt -> failure x
transFunction :: Function -> Result
transFunction x = case x of
  Function type_ identifier lparent parameters rparent ist statements endt -> failure x
transParameter :: Parameter -> Result
transParameter x = case x of
  Param type_ identifier -> failure x
transStatement :: Statement -> Result
transStatement x = case x of
  StatSkip skipt -> failure x
  StatDecAss type_ identifier equalt assignrhs -> failure x
  StatAss assignlhs equalt assignrhs -> failure x
  StatRead readt assignlhs -> failure x
  StatFree freet expression -> failure x
  StatReturn returnt expression -> failure x
  StatExit exitt expression -> failure x
  StatPrint printt expression -> failure x
  StatPrintLn printlnt expression -> failure x
  StatIf ift expression thent statements1 elset statements2 fit -> failure x
  StatWhile whilet expression dot statements donet -> failure x
  StatScope begint statements endt -> failure x
transAssignLhs :: AssignLhs -> Result
transAssignLhs x = case x of
  AssignToIdent identifier -> failure x
  AssignToArrayElem arrayelem -> failure x
  AssignToPair pairelem -> failure x
transAssignRhs :: AssignRhs -> Result
transAssignRhs x = case x of
  AssignExp expression -> failure x
  AssignArrayLit arrayliteral -> failure x
  AssignPair newpairt lparent expression1 expression2 rparent -> failure x
  AssignPairElem pairelem -> failure x
  AssignFunctionCall callt identifier lparent argumentlists rparent -> failure x
transArgumentList :: ArgumentList -> Result
transArgumentList x = case x of
  ArgumentList expression -> failure x
transPairElem :: PairElem -> Result
transPairElem x = case x of
  PairFst fstt expression -> failure x
  PairSnd sndt expression -> failure x
transType :: Type -> Result
transType x = case x of
  BaseType basetype -> failure x
  ArrayType arraydeclarationliteral -> failure x
  PairType pairt lparent pairelemtype1 pairelemtype2 rparent -> failure x
transBaseType :: BaseType -> Result
transBaseType x = case x of
  IntType intt -> failure x
  BoolType boolt -> failure x
  CharType chart -> failure x
  StringType stringt -> failure x
transArrayDeclarationLiteral :: ArrayDeclarationLiteral -> Result
transArrayDeclarationLiteral x = case x of
  ArrayDeclarationLiteral type_ lbrackett rbrackett -> failure x
transArrayElem :: ArrayElem -> Result
transArrayElem x = case x of
  ArrayElem identifier arrayaccesss -> failure x
transArrayAccess :: ArrayAccess -> Result
transArrayAccess x = case x of
  ArrayAccess lbrackett expression rbrackett -> failure x
transArrayLiteral :: ArrayLiteral -> Result
transArrayLiteral x = case x of
  ArrayLiteral lbrackett arrayliteralelems rbrackett -> failure x
transArrayLiteralElem :: ArrayLiteralElem -> Result
transArrayLiteralElem x = case x of
  ArrayLiteralElem expression -> failure x
transPairElemType :: PairElemType -> Result
transPairElemType x = case x of
  PairElemTypeBase basetype -> failure x
  PairElemTypeArray arraydeclarationliteral -> failure x
  PairElemTypePair pairt -> failure x
transExpression :: Expression -> Result
transExpression x = case x of
  IntExp intliteral -> failure x
  BoolExp boolliteral -> failure x
  CharExpr charliteral -> failure x
  StringExpr stringliteral -> failure x
  PairExpr pairliteral -> failure x
  IdentExpr identifier -> failure x
  ArrayExpr arrayelem -> failure x
  UExpr unaryoperator expression -> failure x
  BExp expression1 binaryoperator expression2 -> failure x
  BracketExp lparent expression rparent -> failure x
transUnaryOperator :: UnaryOperator -> Result
transUnaryOperator x = case x of
  UBang nott -> failure x
  UMinus minustoken -> failure x
  ULength lent -> failure x
  UOrd ordt -> failure x
  UChr chrt -> failure x
transBinaryOperator :: BinaryOperator -> Result
transBinaryOperator x = case x of
  BTimes timest -> failure x
  BDivide dividet -> failure x
  BModulus modulot -> failure x
  BPlus plustoken -> failure x
  BMinus minustoken -> failure x
  BGreater greatert -> failure x
  BLess lesst -> failure x
  BGreaterEqual greatereqt -> failure x
  BLessEqual lesseqt -> failure x
  BEqual eqt -> failure x
  BNotEqual noteqt -> failure x
  BAnd andt -> failure x
  BOr ort -> failure x
transIntLiteral :: IntLiteral -> Result
transIntLiteral x = case x of
  IntPlus plustoken intdigit -> failure x
  IntMinus minustoken intdigit -> failure x
  IntLiteral intdigit -> failure x

